diff --git a/device/tt_cluster_descriptor.cpp b/device/tt_cluster_descriptor.cpp
index a3d134e..95ffd76 100644
--- a/device/tt_cluster_descriptor.cpp
+++ b/device/tt_cluster_descriptor.cpp
@@ -391,24 +391,40 @@ std::string tt_ClusterDescriptor::get_cluster_descriptor_file_path() {
     static std::string yaml_path;
     static bool is_initialized = false;
     if (!is_initialized) {
-        // Cluster descriptor yaml will be created in a unique temporary directory.
-        std::filesystem::path temp_path = std::filesystem::temp_directory_path();
-        std::string cluster_path_dir_template = temp_path / "umd_XXXXXX";
-        std::filesystem::path cluster_path_dir = mkdtemp(cluster_path_dir_template.data());
-        std::filesystem::path cluster_path = cluster_path_dir / "cluster_descriptor.yaml";
-        if (!std::filesystem::exists(cluster_path)) {
-            auto val = system(("touch " + cluster_path.string()).c_str());
+        char *env_path = std::getenv("TT_METAL_CLUSTER_DESCRIPTOR");
+        char *visible_device = std::getenv("TT_METAL_VISIBLE_DEVICE");
+        if (env_path) {
+            if (visible_device) {
+                log_warning(
+                    LogSiliconDriver,
+                    "Both TT_METAL_CLUSTER_DESCRIPTOR and TT_METAL_VISIBLE_DEVICE are specified; "
+                    "TT_METAL_VISIBLE_DEVICE will be ignored");
+            }
+            yaml_path = env_path;
+        } else if (visible_device) {
+            chip_id_t chip_id = std::stoi(visible_device);
+            yaml_path = fmt::format("/opt/tenstorrent/cluster_descriptor_{}.yaml", chip_id);
+        } else {
+            // Cluster descriptor yaml will be created in a unique temporary directory.
+            std::filesystem::path temp_path = std::filesystem::temp_directory_path();
+            std::string cluster_path_dir_template = temp_path / "umd_XXXXXX";
+            std::filesystem::path cluster_path_dir = mkdtemp(cluster_path_dir_template.data());
+            std::filesystem::path cluster_path = cluster_path_dir / "cluster_descriptor.yaml";
+            if (!std::filesystem::exists(cluster_path)) {
+                auto val = system(("touch " + cluster_path.string()).c_str());
+                if (val != 0) {
+                    throw std::runtime_error("Cluster Generation Failed!");
+                }
+            }
+
+            int val = create_ethernet_map((char *)cluster_path.string().c_str());
             if (val != 0) {
                 throw std::runtime_error("Cluster Generation Failed!");
             }
+            yaml_path = cluster_path.string();
         }
-
-        int val = create_ethernet_map((char *)cluster_path.string().c_str());
-        if (val != 0) {
-            throw std::runtime_error("Cluster Generation Failed!");
-        }
-        yaml_path = cluster_path.string();
         is_initialized = true;
+        log_info(LogSiliconDriver, "Load cluster descriptor: {}", yaml_path);
     }
     return yaml_path;
 }
